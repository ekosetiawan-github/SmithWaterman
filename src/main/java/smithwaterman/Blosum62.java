package uk.ac.ebi.kraken.util;


public class Blosum62 {

    private int [][] blosum62 =

            {{4, -1, -2, -2, 0, -1, -1, 0, -2, -1, -1, -1, -1, -2, -1, 1, 0, -3, -2, 0, -2, -1, 0, -4},
                    {-1, 5, 0, -2, -3, 1, 0, -2, 0, -3, -2, 2, -1, -3, -2, -1, -1, -3, -2, -3, -1, 0, -1, -4},
                    {-2, 0, 6, 1, -3, 0, 0, 0, 1, -3, -3, 0, -2, -3, -2, 1, 0, -4, -2, -3, 3, 0, -1, -4},
                    {-2, -2, 1, 6, -3, 0, 2, -1, -1, -3, -4, -1, -3, -3, -1, 0, -1, -4, -3, -3, 4, 1, -1, -4},
                    {0, -3, -3, -3, 9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -3, -3, -2, -4},
                    {-1, 1, 0, 0, -3, 5, 2, -2, 0, -3, -2, 1, 0, -3, -1, 0, -1, -2, -1, -2, 0, 3, -1, -4},
                    {-1, 0, 0, 2, -4, 2, 5, -2, 0, -3, -3, 1, -2, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1, -4},
                    {0, -2, 0, -1, -3, -2, -2, 6, -2, -4, -4, -2, -3, -3, -2, 0, -2, -2, -3, -3, -1, -2, -1, -4},
                    {-2, 0, 1, -1, -3, 0, 0, -2, 8, -3, -3, -1, -2, -1, -2, -1, -2, -2, 2, -3, 0, 0, -1, -4},
                    {-1, -3, -3, -3, -1, -3, -3, -4, -3, 4, 2, -3, 1, 0, -3, -2, -1, -3, -1, 3, -3, -3, -1, -4},
                    {-1, -2, -3, -4, -1, -2, -3, -4, -3, 2, 4, -2, 2, 0, -3, -2, -1, -2, -1, 1, -4, -3, -1, -4},
                    {-1, 2, 0, -1, -3, 1, 1, -2, -1, -3, -2, 5, -1, -3, -1, 0, -1, -3, -2, -2, 0, 1, -1, -4},
                    {-1, -1, -2, -3, -1, 0, -2, -3, -2, 1, 2, -1, 5, 0, -2, -1, -1, -1, -1, 1, -3, -1, -1, -4},
                    {-2, -3, -3, -3, -2, -3, -3, -3, -1, 0, 0, -3, 0, 6, -4, -2, -2, 1, 3, -1, -3, -3, -1, -4},
                    {-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4, 7, -1, -1, -4, -3, -2, -2, -1, -2, -4},
                    {1, -1, 1, 0, -1, 0, 0, 0, -1, -2, -2, 0, -1, -2, -1, 4, 1, -3, -2, -2, 0, 0, 0, -4},
                    {0, -1, 0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1, 1, 5, -2, -2, 0, -1, -1, 0, -4},
                    {-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1, 1, -4, -3, -2, 11, 2, -3, -4, -3, -2, -4},
                    {-2, -2, -2, -3, -2, -1, -2, -3, 2, -1, -1, -2, -1, 3, -3, -2, -2, 2, 7, -1, -3, -2, -1, -4},
                    {0, -3, -3, -3, -1, -2, -2, -3, -3, 3, 1, -2, 1, -1, -2, -2, 0, -3, -1, 4, -3, -2, -1, -4},
                    {-2, -1, 3, 4, -3, 0, 1, -1, 0, -3, -4, 0, -3, -3, -2, 0, -1, -4, -3, -3, 4, 1, -1, -4},
                    {-1, 0, 0, 1, -3, 3, 4, -2, 0, -3, -3, 1, -1, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1, -4},
                    {0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, 0, 0, -2, -1, -1, -1, -1, -1, -4},
                    {-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 1}};

    public int getScore(char aC, char bC) {
        int locA = charToLoc(aC);
        int locB = charToLoc(bC);
        return blosum62[locA][locB];
    }

    private int charToLoc(char a) {
    
        switch (a) {
            case 'A':   //A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X  *
                return 0;
            case 'R':   //R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X  *
                return 1;
            case 'N':   //N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X  *
                return 2;
            case 'D':   //D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X  *
                return 3;
            case 'C':   //C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X  *
                return 4;
            case 'Q':   //Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X  *
                return 5;
            case 'E':   //E  G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X  *
                return 6;
            case 'G':   //G  H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X  *
                return 7;
            case 'H':   //H  I  L  K  M  F  P  S  T  W  Y  V  B  Z  X  *
                return 8;
            case 'I':   //I  L  K  M  F  P  S  T  W  Y  V  B  Z  X  *
                return 9;
            case 'L':   //L  K  M  F  P  S  T  W  Y  V  B  Z  X  *
                return 10;
            case 'K':   //K  M  F  P  S  T  W  Y  V  B  Z  X  *
                return 11;
            case 'M':   //M  F  P  S  T  W  Y  V  B  Z  X  *
                return 12;
            case 'F':   //F  P  S  T  W  Y  V  B  Z  X  *
                return 13;
            case 'P':   //P  S  T  W  Y  V  B  Z  X  *
                return 14;
            case 'S':   //S  T  W  Y  V  B  Z  X  *
                return 15;
            case 'T':   //S  T  W  Y  V  B  Z  X  *
                return 16;
            case 'W':   //W  Y  V  B  Z  X  *
                return 17;
            case 'Y':   //Y  V  B  Z  X  *
                return 18;
            case 'V':   //V  B  Z  X  *
                return 19;
            case 'B':   //B  Z  X  *
                return 20;
            case 'Z':   //Z  X  *
                return 21;
            case 'X':   //X  *
                return 22;
            default:
                throw new IllegalArgumentException("Not a standard amino acid!" + a);
        }

    }



}
